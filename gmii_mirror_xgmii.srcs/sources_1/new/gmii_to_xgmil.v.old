
module gmii_to_xgmil(
input CLK,
input RESETN,
input GMII_CTRL,
input [7:0] GMII_D,
output [3:0] XGMII_LEN,
output [63:0] XGMII_D,
output XGMII_EN,
output XGMII_LAST
);

reg gmii_ctrl;
reg [7:0] gmii_d;
reg [3:0] xgmii_len;
reg [63:0] xgmii_d;
reg xgmii_en;
reg xgmii_last;
reg [2:0] offset;
reg [1:0] state;

assign XGMII_LEN = xgmii_len;
assign XGMII_D = xgmii_d;
assign XGMII_EN = (offset == 0) && (state != 0);
assign XGMII_LAST = xgmii_last;

always @(posedge CLK) begin
    if (!RESETN) begin
        gmii_ctrl <= 0;
        gmii_d <= 0;
        xgmii_len <= 0;
        xgmii_d <= 0;
        xgmii_last <= 0;
        offset <= 0;
        state <= 0;
    end else begin
        gmii_ctrl <= GMII_CTRL;
        gmii_d <= GMII_D;
        offset <= offset + 1; // mod 8
        xgmii_en <= (offset == 0) && (state != 0);
        if (state == 0) begin
            if (offset == 0) begin
                xgmii_d <= 0;
                xgmii_len <= 0;
                xgmii_last <= 0;
            end
            xgmii_d <= 0;
            xgmii_len <= 0;
            if (gmii_ctrl == 1 && gmii_d == 8'hd5) begin
                state <= 1;
                offset <= 0;
            end
        end else if (state == 1) begin
            state <= 2;
            xgmii_d <= { gmii_d[7:0], 56'h0 };
            xgmii_len <= gmii_ctrl;
        end else if (state == 2) begin
            xgmii_d <= { gmii_d[7:0], xgmii_d[63:8] };
            xgmii_len <= xgmii_len + gmii_ctrl;
            if (offset == 0) begin
                xgmii_len <= gmii_ctrl;
                if (gmii_ctrl == 0) begin
                    xgmii_last <= 1;
                    state <= 0;
                end
            end
        end
    end
end

//reg [3:0] rxlen_in;
//reg [63:0] rxd_in;
//reg [2:0] ioffset;
//reg state;
//reg [3:0] rxlen_out;
//reg [63:0] rxd_out;
//reg [2:0] offset;
//reg tail_suppress;

//assign RXLEN_OUT = ((offset == 0) && (rxlen_out == 8 || !tail_suppress)) ? rxlen_out : 0;
//assign RXD_OUT = rxd_out;
//assign CE_OUT = (offset == 0);

//always @(posedge CLK) begin
//    if (!RESETN) begin
//        rxlen_in <= 0;
//        rxd_in <= 0;
//        ioffset <= 0;
//        rxlen_out <= 0;
//        rxd_out <= 0;
//        offset <= 0;
//        tail_suppress <= 0;
//        state <= 0;
//    end else begin
//        offset <= offset + 1; // mod 8
//        if (offset == 0) begin
//            tail_suppress <= (rxlen_out != 8);
//        end
//        if (state == 0) begin
//            ioffset <= 0;
//            if (RXC_IN) begin
//                rxlen_in <= 1;
//                rxd_in <= { RXD_IN[7:0], 56'h0 };
//                ioffset <= 1;
//                state <= 1;
//            end
//        end else if (state == 1) begin
//            rxlen_in <= rxlen_in == 8 ? 1 : rxlen_in + 1;
//            rxd_in <= { RXD_IN[7:0], rxd_in[63:8] };
//            ioffset <= ioffset + 1; // mod 8
//            if (RXC_IN == 0) begin
//                rxlen_in <= rxlen_in;
//                rxd_in <= { 8'h0, rxd_in[63:8] };
//            end
//            if (ioffset == 0) begin
//                rxlen_out <= rxlen_in;
//                rxd_out <= rxd_in;
//                if (rxlen_in != 8) begin
//                    rxlen_in <= 0;
//                    rxd_in <= 0;
//                    state <= 0;
//                end
//            end
//        end
//    end
//end

endmodule
